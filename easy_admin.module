<?php

/**
 * @file
 * Display a dropdown menu at the top of the window.
 */


/**
 * Implements hook_menu().
 */
function easy_admin_menu() {
  // Config page.
  $items['admin/config/easy_admin'] = array(
    'title' => 'easy admin configuration',
    'description' => 'Configure easy admin',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('easy_admin_config_form'),
    'access arguments' => array('administer easy admin'),
    'file' => 'inc/easy_admin.config_page.inc',
  );

  return $items;

}

/**
 *  Create a user field as soon as this module is turned on
 */
function easy_admin_enable() {

  // Increase the module weight, so easy_admin catches any alterations made by
  // other modules in hook_menu_alter().
  db_update('system')
    ->fields(array('weight' => 100))
    ->condition('type', 'module')
    ->condition('name', 'easy_admin')
    ->execute();

  // Create the client admin menu
  $menu = array(
        'menu_name' => 'manager',
        'title' => 'Manager Menu',
        'description' => 'Links for content managers that dont need access to all the developer/admin stuff.'
    );
  menu_save($menu);
  
  // Add menu items to the new manager menu - Parent Items
  $item = array(
    'link_path' => '<front>',
    'link_title' => 'Home',
    'menu_name' => 'manager', 
    'weight' => -10,
    'options' => array('attributes' => array('class' => array('home'))),
    'customized' => 1,
    'language' => NULL,
    'module' => 'menu',
  );
  menu_link_save($item);

  $item = array(
    'link_path' => '<nolink>',
    'link_title' => 'Add Content',
    'menu_name' => 'manager', 
    'weight' => -8,
    'options' => array('attributes' => array('class' => array('add'))),
    'customized' => 1,
    'language' => NULL,
    'module' => 'menu',
  );
  menu_link_save($item);

  $item = array(
    'link_path' => '<nolink>',
    'link_title' => 'Manage Content',
    'menu_name' => 'manager', 
    'weight' => -6,
    'options' => array('attributes' => array('class' => array('manage'))),
    'customized' => 1,
    'language' => NULL,
    'module' => 'menu',
  );
  menu_link_save($item);

  $item = array(
    'link_path' => '<nolink>',
    'link_title' => 'People',
    'menu_name' => 'manager', 
    'weight' => -4,
    'options' => array('attributes' => array('class' => array('users'))),
    'customized' => 1,
    'language' => NULL,
    'module' => 'menu',
  );
  $people_id = menu_link_save($item);

  $item = array(
    'link_path' => 'admin/structure/menu/manage/main-menu',
    'link_title' => 'Manage Menu',
    'menu_name' => 'manager', 
    'weight' => -2,
    'options' => array('attributes' => array('class' => array('main_menu'))),
    'customized' => 1,
    'language' => NULL,
    'module' => 'menu',
  );
  menu_link_save($item);

  // Default child elements 
  $item = array(
    'link_path' => 'admin/people/create',
    'link_title' => 'Add People',
    'menu_name' => 'manager', 
    'weight' => 0,
    'options' => array('attributes' => array('class' => array('add-users'))),
    'customized' => 1,
    'language' => NULL,
    'plid' => $people_id, 
    'module' => 'menu',
  );
  menu_link_save($item);

  $item = array(
    'link_path' => 'admin/people',
    'link_title' => 'Manage People',
    'menu_name' => 'manager', 
    'weight' => -4,
    'options' => array('attributes' => array('class' => array('users'))),
    'customized' => 1,
    'language' => NULL,
    'plid' => $people_id, 
    'module' => 'menu',
  );
  menu_link_save($item);

  // Create an image style for the users pic
  // $style = image_style_save(array(
  //   'name' => 'square_profile_pic',
  //   'label' => 'Square - Profile Pic')
  // );
  // $effect = array(
  //   'name' => 'image_scale_and_crop',
  //   'data' => array(
  //     'width' => 150,
  //     'height' => 150,
  //     'upscale' => TRUE,
  //   ),
  //   'isid' => $style['isid'],
  // );
  // image_effect_save($effect);

  // image_style_flush($style);

  // Create a profile picture field so we can place it at the top
  // of the admin menu
  // Check if our field is not already created.
  if (!field_info_field('field_profile_picture')) {

    // Creates the profile pic directory in the public files folder
    /*
$directory = 'public://profile_pic'; 
    file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

    //File path in the module
    $file_path = drupal_get_path('module', 'easy_admin') . '/assets/img/profile.jpg'; 
    // Save file to new location in public files folder
    $file_move = file_unmanaged_copy($file_path, $directory, FILE_EXISTS_RENAME);

    //
    $file_uri = file_build_uri('profile_pic/profile.jpg');

    $file_mime = file_get_mimetype($file_uri);

    $file = new stdClass;
    $file->uid = 1;
    $file->filename = 'profile.jpg';
    $file->uri = $file_uri;
    $file->filemime = $file_mime;
    $file->filesize = filesize($file_uri);
    $file->status = 1;

    file_save($file);
*/

    // Create image field for profile pic usage
    $field = array(
        'field_name' => 'field_profile_picture', 
        'type' => 'image', 
    );
    field_create_field($field);

    // Create the instance on the bundle.
    $instance = array(
      'field_name' => 'field_profile_picture',
      'entity_type' => 'user',
      'bundle' => 'user',
      'label' => 'Profile Picture',
      'description' => 'Profile picture to represent you.',
      'required' => TRUE,
      'settings' => array(
        'file_extensions' => 'png jpg jpeg',
        'file_directory' => 'profile_pic',
        'max_filesize' => '20 MB',
        'alt_field' => 1,
        'title_field' => 0,
        'max_resolution' => '',
        'min_resolution' => '200x200',
        /* 'preview_image_style' => 'square_profile_pic', */
        'default_image' => 0,
        'user_register_form' => 1,
      ),
    );
    field_create_instance($instance);
  }

}

/**
 *  Determines if user has access to easy admin
 */
function easy_admin_enabled() {
  global $user;

  // Determine if the "easy_admin_show_root" setting grants access
  if((int)$user->uid === 1 && (bool)variable_get('easy_admin_show_root', 1)) {
    return TRUE;
  }
  
  // Determine if the "easy_admin_show_roles" setting grants access
  // This is done by intersecting the roles that are enabled in easy admin
  // settings with the roles that the current user has (plus anonymous).
  $enabled_roles = variable_get('easy_admin_roles', array());
  $user_roles = array_keys($user->roles);

  // Add anonymous (role id: 1)
  array_push($user_roles, 1);
  $matched_roles = array_intersect($enabled_roles, $user_roles);

  return (!empty($matched_roles));

}

function easy_admin_preprocess_html(&$vars) {
  if (easy_admin_enabled()) {
    $vars['classes_array'][] = 'easy-admin-menu';
  }
}

/**
 * Implements hook_page_alter().
 */
function easy_admin_page_alter(&$page) {

  // Do not show menu, if user hasn't access to it
  if (!easy_admin_enabled()) {
    return '';
  }

  // Do not display with core overlay, this creates duplicates menus, one in the
  // main page and one in the overlay iframe
  if (function_exists('overlay_get_mode')) {
    if (overlay_get_mode() == 'child') {
      return FALSE;
    }
  }

  // Do not show menu on dialog page in the "media" module.
  if ($page['#theme'] == 'media_dialog_page') {
    return '';
  }

  // Do not show menu on dialog created by references dialog module (https://drupal.org/project/references_dialog)
  if ($page['#theme'] == 'references_dialog_page') {
    return '';
  }  

  $page['page_top']['easy_admin'] = array(
    '#markup' => easy_admin_output(),
    '#weight' => -50,
  );

}

/**
 *  Helper to create a data structure representing a menu item in the dropdown.
 *
 * @param string $title
 *   The title of the menu item.
 * @param string $href
 *   The link of the menu item.
 * @param array $classes
 *   CSS classes that will be put on the menu item (with default theming, these
 *   are put on the <li> tag).
 */
function easy_admin_create_menu_item($title, $href, $classes = array(), $localized_options = array()) {
  return array(
    'title' => $title,
    'href' => $href,
    'classes' => $classes,
    'localized_options' => $localized_options,
    'children' => NULL,
  );
}

/**
 *  Create the easy admin.
 *
 */
function easy_admin_output() {

  $menu_name = 'manager';

  $tree = easy_admin_get_tree($menu_name);

  return theme('easy_admin_toolbar', array('tree' => $tree));

}

/**
 * Render the toolbar.
 *
 * @param array $variables
 *   - tree: A hierarical data structure suitable for
 *           theme_easy_admin_tree().
 *
 * @ingroup themeable
 */
function theme_easy_admin_toolbar($variables) {
  drupal_add_js(drupal_get_path('module', 'easy_admin') . '/assets/js/easy_admin.js');
  drupal_add_css(drupal_get_path('module', 'easy_admin') . '/assets/css/easy_admin.css');

  $tree = $variables['tree'];

  $html = '<div class="easy-admin"><div class="firstLevel">';
  $html .= theme('easy_admin_tree', array('tree' => $tree));
  $html .= '</div></div>';
  return $html;
}

/**
 * Render a menu tree.
 *
 * @param array $variables
 *   An associative array containing:
 *   - tree: An array of menu items. Each menu item is
 *           suitable for being rendered by theme_easy_admin_subtree
 *
 * @ingroup themeable
 */
function theme_easy_admin_tree($variables) {

  global $user;
  $user = user_load($user->uid);
  $style = 'square_profile_pic';
  $menu_items = $variables['tree'];

  $info = field_info_instance('user', 'field_profile_picture', 'user');
  $default_img = $info['settings']['default_image'];

  // if this field exists create a variable that points to the file uri
  if(!empty($user->field_profile_picture)) {
    $profile_pic = $user->field_profile_picture['und']['0'];
    $profile_pic_uri = $profile_pic['uri'];
  }

  // if a custom img is set assign that to a varaible or
  // assign the default image to the variable.
  if (!empty($info) && !empty($profile_pic_uri)) {
    $img_url = $profile_pic_uri; 
    // krumo($img_url);
    // echo "profile set";
  }elseif (!empty($info) && empty($profile_pic_uri)) {
    $default_fid = $info['settings']['default_image'];
    $img_url = $default_fid->uri;  
    // krumo($img_url);
    // echo "default img set";
    // $default_img_object = file_load($default_fid);
  }else {
    $img_url = NULL;
  }

  // Build the user unordered list
  $html = '<ul class="current-user"><li>';
  if ($img_url != NULL) {
    $html .= '<img src="' . image_style_url($style, $img_url) . ' alt="profile" />';
  }
  $html .= $user->name;
  $html .= '</li></ul>';

  // Build the admin menu unordered list from 'manager-menu'
  $html .= '<ul class="manager-menu">';
  foreach ($menu_items as $menu_item) {
    $html .= theme('easy_admin_item', array('menu_item' => $menu_item));
  }
  $html .= '</ul>';

  // Build the logout unordered list
  $html .= '<ul class="user">';
  $html .= '<li><a href="/user/logout" title="User Logout"> <i></i> <span>Logout</span></a></li>';
  $html .= '</ul>';

  // Return all of it
  return $html;
}

/**
 * Render a menu item, including its children.
 *
 * @param array $variables
 *   An associative array containing:
 *   - menu_item: An associative array containing:
 *       - title: The title of the menu link
 *       - href: The link
 *       - classes: An array of classes
 *       - children: An array of menu items. Suitable for being rendered by
 *                   theme_easy_admin_tree.
 *
 * @ingroup themeable
 */

function theme_easy_admin_item($variables) {

  $menu_item = $variables['menu_item'];
  
  if (isset($menu_item['localized_options']['attributes']['class'][0])) {
  	$menu_item_class = $menu_item['localized_options']['attributes']['class'][0];
  	$html = '<li class="' . $menu_item_class . '">';
  } else {
  	$html = '<li class="placeholder">';
  }
  $html .= l($menu_item['title'], $menu_item['href'], $menu_item['localized_options']);
  if (isset($menu_item['children'])) {
    $html .= '<div class="subMenu">' . theme('easy_admin_tree', array('tree' => $menu_item['children'])) . '</div>';
  }
  $html .= '</li>';

  return $html;
}

/**
 * Get a tree.
 *
 * @param string $menu_name
 *   The name of the menu.
 *
 * @return array
 *   A data structure suitable for theme_easy_admin_tree().
 */
function easy_admin_get_tree($menu_name) {
  $tree = menu_tree_all_data($menu_name);

  // Allow i18n module to translate strings where available.
  if (module_exists('i18n_menu')) {
    $tree = i18n_menu_localize_tree($tree);
  }

  $menu_items = easy_admin_create_datastructure_from_tree($tree);
  return $menu_items;
}

/**
 * Build a datastructure suitable for theme_easy_admin_tree.
 *
 * @param array $tree
 *   A tree structure like the returned by menu_tree_all_data.
 *
 * @return array
 *   A data structure suitable for theme_easy_admin_tree().
 */
function easy_admin_create_datastructure_from_tree($tree) {
  $new_menu_list = array();
  foreach ($tree as $element) {
    // Skip disabled links.
    if ($element['link']['hidden'] == 1) {
      continue;
    }

    $new_menu_item = easy_admin_create_menu_item($element['link']['title'], $element['link']['href'], array(), $element['link']['localized_options']);
    if (isset($element['below']) && count($element['below']) > 0) {
      $new_menu_item['classes'][] = 'expanded';
      $new_menu_item['children'] = easy_admin_create_datastructure_from_tree($element['below']);
    }

    $new_menu_list[] = $new_menu_item;
  }

  return $new_menu_list;
}

/**
 * Implements hook_permission().
 */
function easy_admin_permission() {
  return array(
    'administer easy admin' => array(
      'title' => t('Administer easy admin'),
      'description' => t('Configure easy admin'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function easy_admin_theme() {
  return array(
    'easy_admin_toolbar' => array(
      'variables' => array('tree' => array()),
    ),
    'easy_admin_tree' => array(
      'variables' => array('tree' => array()),
    ),
    'easy_admin_item' => array(
      'variables' => array('menu_item' => array()),
    ),
  );
}
